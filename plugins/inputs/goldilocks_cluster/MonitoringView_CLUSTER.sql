
/*
MONITOR_SESSION_STAT 
*/
CREATE OR REPLACE VIEW PUBLIC.MONITOR_SESSION_STAT 
AS 
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
     , TOTAL_SESSION_COUNT
     , ACTIVE_SESSION_COUNT
     , TOTAL_STATEMENT_COUNT
     , LONG_RUNNING_STATEMENT_COUNT
     , TOTAL_TRANSACTION_COUNT
     , LONG_RUNNING_TRANSACTION_COUNT
  FROM (
       SELECT COUNT(*) TOTAL_SESSION_COUNT
         FROM V$SESSION
        WHERE USER_NAME IS NOT NULL
          AND PROGRAM_NAME != 'gmaster'
     ) X CROSS JOIN (
       SELECT COUNT(DISTINCT CASE WHEN X.STMT_VIEW_SCN != '-1.-1.-1' THEN SESSION_ID END) ACTIVE_SESSION_COUNT
            , COUNT(*) TOTAL_STATEMENT_COUNT
            , COUNT(CASE WHEN DATEDIFF (SECOND, X.START_TIME, SYSTIMESTAMP ) > 5 AND X.STMT_VIEW_SCN != '-1.-1.-1' THEN 1 END) LONG_RUNNING_STATEMENT_COUNT
         FROM V$STATEMENT X
     ) Y CROSS JOIN (
       SELECT COUNT(*) TOTAL_TRANSACTION_COUNT
            , COUNT(CASE WHEN ABS(DATEDIFF (SECOND, X.START_TIME, SYSTIMESTAMP )) > 5 THEN 1 END) LONG_RUNNING_TRANSACTION_COUNT
         FROM V$TRANSACTION X
     ) Z;
  


/*
TABLE_SPACE_STAT 
*/

CREATE OR REPLACE VIEW PUBLIC.MONITOR_TABLESPACE_STAT 
AS 
SELECT 
      LOCAL_GROUP_NAME () GROUP_NAME, 
      LOCAL_MEMBER_NAME() MEMBER_NAME,
      TBS_NAME NAME,
      X.TOTAL_EXT_COUNT * X.EXT_SIZE TOTAL_BYTES, 
      (X.USED_DATA_EXT_COUNT + X.USED_META_EXT_COUNT ) * X.EXT_SIZE USED_BYTES, 
      ROUND ( (X.USED_DATA_EXT_COUNT + X.USED_META_EXT_COUNT ) * 100/ X.TOTAL_EXT_COUNT , 2) USED_PCT  
FROM X$TABLESPACE_STAT@LOCAL X INNER JOIN V$TABLESPACE Y ON X.TBS_ID = Y.TBS_ID ;


/* 
  Shared memory static size usages 
*/
CREATE OR REPLACE VIEW PUBLIC.MONITOR_SGA_STAT
AS 
SELECT 
      LOCAL_GROUP_NAME () GROUP_NAME, 
      LOCAL_MEMBER_NAME() MEMBER_NAME, 
      TOTAL TOTAL_BYTES,
      USED  USED_BYTES, 
      ROUND(USED*100/TOTAL, 2) USED_PCT
FROM (
     SELECT (
            SELECT TO_NUMBER(X.VALUE) TOTAL_SIZE
            FROM X$PROPERTY@LOCAL X
            WHERE X.PROPERTY_NAME = 'SHARED_MEMORY_STATIC_SIZE'
            ) TOTAL, SUM(XK.VALUE) USED
         FROM X$KN_SYSTEM_INFO@LOCAL XK
        WHERE 1 = 1
          AND XK.NAME IN ('FIXED_STATIC_ALLOC_SIZE', 'VARIABLE_STATIC_ALLOC_SIZE' )
     ) X;

/*
AGER STATUS
*/
CREATE OR REPLACE VIEW PUBLIC.MONITOR_AGER_STAT
AS 
SELECT
      LOCAL_GROUP_NAME () GROUP_NAME, 
      LOCAL_MEMBER_NAME() MEMBER_NAME, 
          TO_NUMBER ( SPLIT_PART( AGABLE_SCN_GAP, '.', 1 )) GLOBAL_GAP,
          TO_NUMBER ( SPLIT_PART( AGABLE_SCN_GAP, '.', 2 )) DOMAIN_GAP,
          TO_NUMBER ( SPLIT_PART( AGABLE_SCN_GAP, '.', 3 )) LOCAL_GAP
FROM V$AGABLE_INFO;



/* INSTANCE */ 
CREATE OR REPLACE VIEW PUBLIC.MONITOR_INSTANCE 
AS
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
     , RELEASE_VERSION
     , STARTUP_TIME
     , INSTANCE_STATUS
  FROM V$INSTANCE;


/*+ SQL STAT */ 
CREATE OR REPLACE VIEW PUBLIC.MONITOR_SQL_STAT 
AS 
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
     , STAT_NAME
     , STAT_VALUE
  FROM V$SYSTEM_SQL_STAT;


/* DISPATCHER */
CREATE OR REPLACE VIEW MONITOR_CLUSTER_DISPATCHER AS 
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
     , (CASE WHEN IS_SYNC = TRUE THEN 'SYNC' ELSE 'ASYNC' END ) DISPATCHER_TYPE
     , RX_BYTES
     , TX_BYTES
     , RX_JOBS
     , TX_JOBS
FROM V$CLUSTER_DISPATCHER;


/* SESSION VIEW  */ 

CREATE OR REPLACE VIEW MONITOR_SESSION_DETAIL AS 
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
     , TO_CHAR(X.SESSION_ID) SESSION_ID
     , SERIAL_NO
     , TRANS_ID
     , CONNECTION_TYPE
     , USER_NAME
     , PROCESS_ID
     , LOGON_TIME
     , PROGRAM_NAME
     , CLIENT_ADDRESS
     , CLIENT_PORT
     , (CASE WHEN (NVL(Y.CNT, 0) > 0 OR X.TRANS_ID != -1 ) THEN 'ACTIVE' ELSE 'IDLE' END ) IS_ACTIVE
  FROM V$SESSION X LEFT OUTER JOIN (
       SELECT SESSION_ID
            , COUNT(*) CNT
         FROM V$STATEMENT
        WHERE STMT_VIEW_SCN != '-1.-1.-1'
        GROUP BY SESSION_ID
     ) Y ON X.SESSION_ID = Y.SESSION_ID
 WHERE USER_NAME IS NOT NULL
   AND PROGRAM_NAME != 'gmaster';



/* STATEMENT VIEW  */
CREATE OR REPLACE VIEW MONITOR_STATEMENT_DETAIL AS 
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
      , TO_CHAR (X.SESSION_ID) || '-' || TO_CHAR(STMT_ID ) SESSIONS_STMT_ID 
     , Y.PROGRAM_NAME
     , Y.PROCESS_ID
     , (CASE WHEN STMT_VIEW_SCN = '-1.-1.-1' THEN 'DONE' ELSE 'RUNNING' END ) STATUS
     , RPAD(SQL_TEXT, 64) SQL_TEXT
     , NVL(DATEDIFF(SECOND, START_TIME, SYSTIMESTAMP ), 0)  ELASPED_SECONDS
FROM V$STATEMENT X INNER JOIN V$SESSION Y ON X.SESSION_ID = Y.SESSION_ID;

/* TRANSACTION VIEW  */

CREATE OR REPLACE VIEW MONITOR_TRANSACTION_DETAIL AS 
SELECT LOCAL_GROUP_NAME ( ) GROUP_NAME
     , LOCAL_MEMBER_NAME ( ) MEMBER_NAME
     , TO_CHAR(X.TRANS_ID) TRANS_ID 
     , Y.PROCESS_ID
     , Y.PROGRAM_NAME
     , X.TRANS_STATE
     , DECODE(X.IS_XA, TRUE, 'TRUE', 'FALSE') IS_XA 
     , NVL(DATEDIFF(SECOND, X.START_TIME, SYSTIMESTAMP ) ,0) ELAPSED_SECONDS
     ,NVL( (SELECT GRANT_TRANS_ID FROM V$LOCK_WAIT WHERE REQUEST_TRANS_ID = X.TRANS_ID ), -1) WAIT_FOR  
  FROM V$TRANSACTION X INNER JOIN V$SESSION Y ON X.SESSION_ID = Y.SESSION_ID;


/* SHARD TABLE DISTRIBUTION */
CREATE OR REPLACE VIEW MONITOR_SHARD_TAB_DISTRIBUTION AS 
SELECT
       X.OWNER, X.TABLE_SCHEMA, X.TABLE_NAME, Y.GROUP_NAME,  
       MIN ( BLOCKS ) * 8192 ALLOC_BYTES
  FROM ALL_CLUSTER_TABLES X INNER JOIN ALL_TAB_PLACE Y  
   ON X.OWNER = Y.OWNER
   AND X.TABLE_SCHEMA = Y.TABLE_SCHEMA
   AND X.TABLE_NAME = Y.TABLE_NAME
WHERE SHARD_STRATEGY != 'CLONED'
GROUP BY X.OWNER, X.TABLE_SCHEMA, X.TABLE_NAME, Y.GROUP_NAME
ORDER BY 1,2,3,4;

/* SHARD INDEX DISTRIBUTION */
CREATE OR REPLACE VIEW MONITOR_SHARD_INDEX_DISTRIBUTION AS 
SELECT
       X.OWNER, X.TABLE_SCHEMA, X.TABLE_NAME, Y.INDEX_NAME, Y.GROUP_NAME,  
       MIN ( BLOCKS ) * 8192 ALLOC_BYTES
  FROM ALL_CLUSTER_TABLES X INNER JOIN ALL_IND_PLACE Y  
   ON X.OWNER = Y.OWNER
   AND X.TABLE_SCHEMA = Y.TABLE_SCHEMA
   AND X.TABLE_NAME = Y.TABLE_NAME
WHERE SHARD_STRATEGY != 'CLONED'
GROUP BY X.OWNER, X.TABLE_SCHEMA, X.TABLE_NAME, Y.INDEX_NAME, Y.GROUP_NAME
ORDER BY 1,2,3,4,5;


